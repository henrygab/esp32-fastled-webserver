const uint16_t physicalToFibonacci[NUM_LEDS] { 0, 55, 110, 165, 220, 275, 330, 385, 440, 495, 550, 605, 660, 715, 770, 825, 880, 935, 990, 1011, 956, 901, 846, 791, 736, 681, 626, 571, 516, 461, 406, 351, 296, 241, 186, 131, 76, 21, 42, 97, 152, 207, 262, 317, 372, 427, 482, 537, 592, 647, 702, 757, 812, 867, 922, 977, 998, 943, 888, 833, 778, 723, 668, 613, 558, 503, 448, 393, 338, 283, 228, 173, 118, 63, 8, 29, 84, 139, 194, 249, 304, 359, 414, 469, 524, 579, 634, 689, 744, 799, 854, 909, 964, 1019, 985, 930, 875, 820, 765, 710, 655, 600, 545, 490, 435, 380, 325, 270, 215, 160, 105, 50, 16, 71, 126, 181, 236, 291, 346, 401, 456, 511, 566, 621, 676, 731, 786, 841, 896, 951, 1006, 972, 917, 862, 807, 752, 697, 642, 587, 532, 477, 422, 367, 312, 257, 202, 147, 92, 37, 3, 58, 113, 168, 223, 278, 333, 388, 443, 498, 553, 608, 663, 718, 773, 828, 883, 938, 993, 1014, 959, 904, 849, 794, 739, 684, 629, 574, 519, 464, 409, 354, 299, 244, 189, 134, 79, 24, 45, 100, 155, 210, 265, 320, 375, 430, 485, 540, 595, 650, 705, 760, 815, 870, 925, 980, 11, 66, 121, 176, 231, 286, 341, 396, 451, 506, 561, 616, 671, 726, 781, 836, 891, 946, 1001, 1022, 967, 912, 857, 802, 747, 692, 637, 582, 527, 472, 417, 362, 307, 252, 197, 142, 87, 32, 53, 108, 163, 218, 273, 328, 383, 438, 493, 548, 603, 658, 713, 768, 823, 878, 933, 988, 1009, 954, 899, 844, 789, 734, 679, 624, 569, 514, 459, 404, 349, 294, 239, 184, 129, 74, 19, 40, 95, 150, 205, 260, 315, 370, 425, 480, 535, 590, 645, 700, 755, 810, 865, 920, 975, 996, 941, 886, 831, 776, 721, 666, 611, 556, 501, 446, 391, 336, 281, 226, 171, 116, 61, 6, 27, 82, 137, 192, 247, 302, 357, 412, 467, 522, 577, 632, 687, 742, 797, 852, 907, 962, 1017, 983, 928, 873, 818, 763, 708, 653, 598, 543, 488, 433, 378, 323, 268, 213, 158, 103, 48, 14, 69, 124, 179, 234, 289, 344, 399, 454, 509, 564, 619, 674, 729, 784, 839, 894, 949, 1004, 970, 915, 860, 805, 750, 695, 640, 585, 530, 475, 420, 365, 310, 255, 200, 145, 90, 35, 1, 56, 111, 166, 221, 276, 331, 386, 441, 496, 551, 606, 661, 716, 771, 826, 881, 936, 991, 22, 77, 132, 187, 242, 297, 352, 407, 462, 517, 572, 627, 682, 737, 792, 847, 902, 957, 1012, 978, 923, 868, 813, 758, 703, 648, 593, 538, 483, 428, 373, 318, 263, 208, 153, 98, 43, 9, 64, 119, 174, 229, 284, 339, 394, 449, 504, 559, 614, 669, 724, 779, 834, 889, 944, 999, 1020, 965, 910, 855, 800, 745, 690, 635, 580, 525, 470, 415, 360, 305, 250, 195, 140, 85, 30, 51, 106, 161, 216, 271, 326, 381, 436, 491, 546, 601, 656, 711, 766, 821, 876, 931, 986, 1007, 952, 897, 842, 787, 732, 677, 622, 567, 512, 457, 402, 347, 292, 237, 182, 127, 72, 17, 38, 93, 148, 203, 258, 313, 368, 423, 478, 533, 588, 643, 698, 753, 808, 863, 918, 973, 994, 939, 884, 829, 774, 719, 664, 609, 554, 499, 444, 389, 334, 279, 224, 169, 114, 59, 4, 25, 80, 135, 190, 245, 300, 355, 410, 465, 520, 575, 630, 685, 740, 795, 850, 905, 960, 1015, 981, 926, 871, 816, 761, 706, 651, 596, 541, 486, 431, 376, 321, 266, 211, 156, 101, 46, 12, 67, 122, 177, 232, 287, 342, 397, 452, 507, 562, 617, 672, 727, 782, 837, 892, 947, 1002, 33, 88, 143, 198, 253, 308, 363, 418, 473, 528, 583, 638, 693, 748, 803, 858, 913, 968, 1023, 989, 934, 879, 824, 769, 714, 659, 604, 549, 494, 439, 384, 329, 274, 219, 164, 109, 54, 20, 75, 130, 185, 240, 295, 350, 405, 460, 515, 570, 625, 680, 735, 790, 845, 900, 955, 1010, 976, 921, 866, 811, 756, 701, 646, 591, 536, 481, 426, 371, 316, 261, 206, 151, 96, 41, 7, 62, 117, 172, 227, 282, 337, 392, 447, 502, 557, 612, 667, 722, 777, 832, 887, 942, 997, 1018, 963, 908, 853, 798, 743, 688, 633, 578, 523, 468, 413, 358, 303, 248, 193, 138, 83, 28, 49, 104, 159, 214, 269, 324, 379, 434, 489, 544, 599, 654, 709, 764, 819, 874, 929, 984, 1005, 950, 895, 840, 785, 730, 675, 620, 565, 510, 455, 400, 345, 290, 235, 180, 125, 70, 15, 36, 91, 146, 201, 256, 311, 366, 421, 476, 531, 586, 641, 696, 751, 806, 861, 916, 971, 992, 937, 882, 827, 772, 717, 662, 607, 552, 497, 442, 387, 332, 277, 222, 167, 112, 57, 2, 23, 78, 133, 188, 243, 298, 353, 408, 463, 518, 573, 628, 683, 738, 793, 848, 903, 958, 1013, 44, 99, 154, 209, 264, 319, 374, 429, 484, 539, 594, 649, 704, 759, 814, 869, 924, 979, 1000, 945, 890, 835, 780, 725, 670, 615, 560, 505, 450, 395, 340, 285, 230, 175, 120, 65, 10, 31, 86, 141, 196, 251, 306, 361, 416, 471, 526, 581, 636, 691, 746, 801, 856, 911, 966, 1021, 987, 932, 877, 822, 767, 712, 657, 602, 547, 492, 437, 382, 327, 272, 217, 162, 107, 52, 18, 73, 128, 183, 238, 293, 348, 403, 458, 513, 568, 623, 678, 733, 788, 843, 898, 953, 1008, 974, 919, 864, 809, 754, 699, 644, 589, 534, 479, 424, 369, 314, 259, 204, 149, 94, 39, 5, 60, 115, 170, 225, 280, 335, 390, 445, 500, 555, 610, 665, 720, 775, 830, 885, 940, 995, 1016, 961, 906, 851, 796, 741, 686, 631, 576, 521, 466, 411, 356, 301, 246, 191, 136, 81, 26, 47, 102, 157, 212, 267, 322, 377, 432, 487, 542, 597, 652, 707, 762, 817, 872, 927, 982, 1003, 948, 893, 838, 783, 728, 673, 618, 563, 508, 453, 398, 343, 288, 233, 178, 123, 68, 13, 34, 89, 144, 199, 254, 309, 364, 419, 474, 529, 584, 639, 694, 749, 804, 859, 914, 969 };
const uint16_t fibonacciToPhysical[NUM_LEDS] {};
const uint8_t  coordsX[NUM_LEDS]             { 130, 157, 169, 178, 185, 192, 197, 201, 204, 207, 209, 211, 212, 212, 211, 210, 209, 206, 204, 190, 194, 197, 200, 202, 203, 204, 204, 204, 203, 201, 198, 195, 191, 186, 180, 172, 162, 146, 152, 165, 173, 180, 185, 189, 192, 194, 196, 197, 197, 196, 195, 193, 191, 188, 184, 180, 165, 170, 174, 178, 181, 184, 186, 188, 189, 189, 189, 188, 186, 183, 179, 173, 166, 157, 138, 146, 159, 167, 172, 176, 179, 181, 182, 182, 181, 180, 178, 175, 172, 168, 164, 159, 154, 149, 138, 144, 149, 154, 159, 163, 166, 169, 172, 173, 174, 174, 174, 172, 169, 165, 159, 150, 140, 152, 158, 163, 165, 167, 167, 167, 165, 163, 161, 158, 154, 149, 145, 139, 134, 127, 121, 111, 117, 124, 130, 135, 140, 145, 149, 152, 155, 158, 159, 160, 160, 159, 156, 152, 144, 132, 145, 150, 152, 153, 153, 152, 150, 148, 144, 141, 136, 131, 126, 120, 114, 108, 101, 94, 77, 85, 92, 99, 105, 112, 117, 123, 128, 133, 137, 140, 143, 145, 147, 147, 146, 143, 137, 137, 140, 141, 141, 139, 137, 133, 130, 125, 120, 115, 109, 103, 97, 90, 83, 76, 69, 131, 135, 136, 135, 133, 130, 127, 123, 118, 113, 108, 102, 95, 89, 82, 75, 68, 61, 54, 40, 47, 54, 61, 68, 75, 82, 88, 95, 101, 107, 112, 117, 121, 125, 128, 130, 132, 131, 128, 127, 124, 120, 116, 111, 106, 101, 95, 89, 82, 75, 69, 62, 55, 48, 41, 34, 22, 29, 36, 42, 49, 56, 63, 70, 76, 83, 89, 95, 101, 107, 112, 116, 120, 124, 126, 123, 118, 113, 108, 103, 97, 91, 85, 78, 72, 65, 58, 51, 45, 38, 31, 25, 18, 10, 16, 22, 28, 34, 41, 48, 54, 61, 68, 74, 81, 87, 94, 100, 106, 112, 117, 124, 119, 111, 105, 98, 91, 85, 78, 71, 65, 58, 51, 45, 38, 32, 26, 20, 14, 8, 3, 3, 8, 13, 18, 24, 30, 36, 42, 49, 56, 62, 69, 76, 83, 90, 97, 105, 113, 118, 107, 98, 90, 82, 75, 68, 61, 54, 48, 41, 35, 29, 23, 18, 13, 8, 4, 0, 2, 6, 10, 14, 19, 24, 29, 35, 41, 47, 54, 60, 68, 75, 83, 91, 100, 111, 123, 104, 93, 84, 76, 68, 61, 54, 47, 41, 35, 30, 25, 20, 16, 12, 8, 5, 3, 111, 97, 87, 78, 70, 62, 55, 49, 43, 37, 32, 27, 22, 18, 15, 12, 9, 7, 6, 11, 12, 14, 16, 19, 22, 25, 29, 34, 39, 45, 51, 57, 64, 72, 81, 91, 104, 116, 97, 85, 76, 67, 60, 53, 47, 42, 37, 33, 29, 26, 23, 21, 19, 18, 18, 17, 26, 25, 24, 25, 25, 26, 28, 31, 33, 37, 41, 46, 51, 57, 64, 71, 80, 91, 106, 99, 86, 76, 68, 61, 55, 50, 46, 42, 39, 36, 34, 33, 32, 32, 32, 33, 34, 46, 43, 41, 40, 39, 39, 39, 40, 42, 44, 47, 51, 55, 60, 66, 73, 82, 93, 110, 102, 89, 79, 72, 65, 60, 56, 53, 50, 48, 47, 46, 46, 47, 48, 50, 52, 55, 69, 65, 62, 59, 57, 55, 54, 54, 54, 55, 57, 59, 62, 66, 71, 78, 86, 97, 119, 108, 93, 84, 78, 72, 68, 65, 63, 62, 61, 61, 62, 64, 66, 68, 71, 75, 79, 84, 95, 90, 85, 81, 78, 75, 72, 70, 69, 69, 69, 70, 72, 75, 79, 84, 92, 102, 115, 99, 91, 85, 81, 79, 77, 76, 76, 77, 79, 81, 83, 87, 91, 95, 100, 105, 111, 109, 98, 92, 88, 86, 84, 84, 84, 85, 87, 89, 92, 96, 100, 105, 110, 116, 122, 128, 138, 132, 126, 120, 114, 109, 105, 101, 98, 95, 93, 91, 91, 91, 92, 95, 99, 106, 115, 106, 101, 99, 98, 98, 99, 100, 103, 106, 110, 114, 118, 124, 129, 135, 142, 148, 155, 165, 158, 151, 145, 138, 133, 127, 122, 118, 114, 110, 108, 106, 104, 104, 105, 108, 113, 122, 114, 111, 110, 111, 112, 114, 117, 121, 125, 130, 135, 141, 147, 153, 160, 167, 174, 181, 197, 189, 182, 175, 168, 161, 155, 149, 143, 138, 133, 128, 124, 121, 118, 116, 116, 116, 120, 121, 121, 122, 124, 127, 130, 135, 139, 145, 150, 156, 162, 169, 176, 183, 190, 197, 204, 218, 211, 203, 196, 189, 182, 176, 169, 163, 157, 151, 145, 140, 136, 132, 128, 126, 125, 125, 127, 129, 132, 136, 140, 145, 151, 156, 162, 169, 175, 182, 188, 195, 202, 209, 216, 223, 234, 228, 221, 214, 207, 201, 194, 187, 180, 174, 167, 161, 155, 150, 144, 140, 135, 131, 128, 131, 137, 142, 147, 153, 159, 165, 171, 178, 185, 191, 198, 205, 212, 218, 225, 231, 237, 243, 136, 143, 149, 155, 162, 168, 175, 182, 188, 195, 202, 208, 215, 221, 228, 234, 240, 245, 251, 246, 241, 235, 230, 224, 217, 211, 204, 198, 191, 184, 177, 170, 164, 157, 150, 142, 133, 139, 149, 157, 164, 172, 179, 186, 193, 200, 206, 213, 219, 225, 231, 236, 241, 246, 251, 255, 253, 250, 245, 241, 236, 231, 225, 220, 213, 207, 200, 194, 187, 179, 172, 164, 156, 146, 139, 153, 162, 171, 179, 187, 194, 201, 207, 213, 219, 225, 230, 235, 240, 244, 247, 251, 253, 249, 247, 244, 241, 237, 233, 229, 224, 218, 212, 206, 200, 193, 185, 178, 169, 159, 147, 135, 154, 166, 175, 183, 191, 198, 205, 211, 216, 222, 226, 231, 234, 238, 241, 243, 245, 246, 240, 240, 239, 238, 236, 234, 231, 227, 223, 219, 214, 208, 202, 196, 189, 181, 171, 161, 146, 154, 167, 177, 185, 192, 199, 205, 210, 215, 219, 223, 226, 229, 231, 232, 233, 233, 233, 224, 225, 226, 226, 226, 225, 223, 221, 218, 215, 211, 206, 201, 195, 188, 181, 171, 160, 142, 151, 165, 175, 184, 191, 197, 202, 206, 210, 213, 215, 217, 218, 219, 219, 218, 217, 215 };
const uint8_t  coordsY[NUM_LEDS]             { 127, 125, 123, 119, 115, 110, 105, 99, 93, 87, 81, 74, 68, 61, 54, 47, 40, 33, 27, 16, 23, 29, 36, 42, 49, 56, 63, 69, 76, 82, 89, 95, 101, 106, 111, 116, 120, 124, 120, 115, 109, 103, 97, 91, 85, 78, 72, 65, 58, 52, 45, 38, 32, 26, 19, 13, 6, 11, 17, 23, 29, 35, 42, 48, 55, 62, 69, 75, 82, 89, 95, 101, 108, 114, 123, 117, 108, 101, 94, 87, 80, 73, 66, 59, 53, 46, 40, 33, 27, 21, 16, 10, 5, 1, 2, 6, 10, 15, 21, 26, 32, 38, 45, 51, 58, 65, 72, 79, 86, 93, 101, 110, 116, 104, 95, 86, 78, 71, 64, 57, 50, 44, 38, 32, 26, 21, 16, 11, 7, 3, 0, 3, 6, 9, 13, 17, 22, 27, 32, 38, 44, 50, 57, 64, 72, 79, 88, 97, 109, 121, 102, 91, 81, 73, 65, 58, 51, 45, 39, 34, 29, 24, 20, 16, 12, 9, 7, 5, 9, 10, 12, 14, 16, 19, 23, 27, 31, 36, 41, 47, 53, 60, 67, 75, 84, 95, 110, 102, 89, 79, 70, 63, 56, 50, 44, 39, 34, 30, 26, 23, 21, 19, 17, 16, 16, 114, 95, 84, 74, 66, 59, 53, 47, 42, 38, 34, 31, 28, 26, 24, 23, 23, 23, 23, 33, 31, 30, 30, 30, 30, 32, 33, 36, 39, 42, 47, 51, 57, 63, 71, 79, 90, 104, 98, 85, 76, 68, 62, 56, 51, 47, 44, 41, 39, 38, 37, 37, 37, 38, 40, 42, 54, 51, 49, 47, 45, 45, 44, 45, 46, 47, 50, 53, 57, 61, 67, 74, 82, 92, 109, 102, 89, 80, 73, 67, 62, 59, 56, 54, 53, 52, 52, 53, 54, 56, 58, 61, 64, 79, 75, 71, 67, 65, 62, 61, 60, 59, 60, 61, 62, 65, 69, 73, 79, 87, 97, 117, 108, 94, 86, 80, 75, 72, 69, 68, 67, 67, 68, 69, 71, 74, 77, 80, 85, 89, 95, 105, 100, 95, 90, 86, 83, 80, 77, 76, 75, 74, 75, 76, 78, 82, 86, 93, 103, 114, 101, 93, 88, 85, 83, 82, 82, 82, 84, 86, 88, 92, 96, 100, 105, 110, 116, 122, 132, 126, 120, 115, 109, 105, 101, 97, 94, 92, 90, 89, 89, 90, 92, 95, 100, 109, 124, 108, 102, 98, 96, 96, 96, 97, 99, 102, 105, 109, 114, 119, 124, 130, 136, 142, 149, 116, 108, 105, 103, 102, 103, 105, 107, 110, 113, 118, 122, 127, 133, 139, 145, 152, 159, 166, 175, 168, 161, 154, 148, 142, 136, 130, 126, 121, 117, 114, 111, 110, 109, 109, 111, 115, 122, 116, 114, 114, 116, 118, 121, 124, 128, 133, 138, 144, 150, 156, 162, 169, 176, 183, 191, 205, 198, 191, 184, 177, 170, 163, 157, 151, 145, 140, 135, 131, 127, 124, 121, 120, 119, 121, 123, 124, 126, 129, 132, 136, 141, 146, 152, 158, 164, 170, 177, 184, 191, 198, 205, 212, 225, 218, 211, 204, 197, 190, 183, 177, 170, 164, 158, 152, 146, 141, 137, 133, 130, 127, 126, 129, 132, 136, 141, 146, 151, 157, 163, 169, 175, 182, 189, 195, 202, 209, 216, 223, 229, 239, 233, 227, 220, 214, 207, 200, 193, 187, 180, 173, 167, 161, 155, 149, 144, 139, 134, 128, 133, 140, 146, 152, 158, 164, 170, 177, 184, 190, 197, 204, 210, 217, 223, 230, 236, 241, 247, 248, 243, 237, 232, 226, 220, 213, 207, 200, 193, 187, 180, 173, 166, 160, 153, 146, 139, 134, 145, 153, 160, 168, 175, 182, 189, 195, 202, 209, 215, 221, 227, 233, 238, 243, 248, 253, 141, 151, 160, 168, 175, 183, 190, 197, 203, 210, 216, 222, 228, 233, 238, 243, 247, 251, 255, 252, 249, 246, 242, 237, 232, 227, 222, 216, 210, 204, 197, 190, 183, 175, 167, 158, 148, 141, 155, 165, 174, 182, 189, 196, 203, 209, 215, 221, 226, 231, 235, 239, 243, 246, 249, 251, 246, 245, 242, 240, 236, 233, 229, 224, 219, 214, 208, 202, 195, 188, 180, 171, 161, 149, 137, 156, 167, 177, 185, 193, 199, 206, 211, 217, 221, 226, 229, 233, 235, 238, 239, 241, 241, 234, 235, 234, 234, 232, 231, 228, 225, 222, 218, 213, 208, 203, 196, 189, 182, 173, 162, 147, 154, 167, 177, 185, 193, 199, 205, 209, 214, 217, 221, 223, 225, 226, 227, 228, 227, 226, 216, 218, 219, 220, 220, 220, 219, 217, 215, 212, 209, 205, 200, 195, 188, 181, 172, 160, 143, 151, 165, 175, 183, 190, 195, 200, 204, 207, 209, 211, 212, 213, 213, 212, 211, 209, 207, 194, 198, 200, 203, 204, 205, 206, 206, 205, 203, 201, 198, 194, 190, 184, 177, 169, 157, 133, 146, 161, 171, 178, 184, 188, 192, 195, 197, 198, 198, 198, 197, 196, 194, 191, 188, 184, 180, 152, 164, 172, 178, 182, 186, 188, 190, 191, 191, 190, 189, 187, 185, 182, 178, 174, 170, 154, 159, 164, 168, 172, 176, 178, 181, 182, 183, 183, 183, 181, 179, 176, 171, 165, 156, 139, 146, 157, 164, 169, 172, 174, 176, 176, 175, 174, 172, 170, 167, 163, 159, 154, 149, 143, 137, 127, 133, 139, 144, 149, 154, 158, 161, 164, 166, 168, 168, 168, 167, 165, 162, 157, 149, 139, 150, 155, 159, 161, 161, 161, 160, 158, 156, 153, 149, 145, 140, 135, 129, 123, 116, 110, 100, 107, 113, 119, 125, 131, 136, 140, 144, 148, 151, 153, 154, 155, 154, 152, 149, 142, 132, 142, 146, 148, 148, 147, 146, 143, 140, 136, 132, 127, 122, 116, 110, 104, 97, 90, 83, 67, 75, 82, 89, 95, 102, 108, 114, 119, 124, 129, 133, 136, 139, 141, 142, 142, 140, 136, 135, 137, 137, 135, 133, 130, 126, 122, 117, 112, 106, 100, 94, 87, 81, 74, 66, 59, 45, 52, 59, 66, 73, 80, 87, 93, 99, 105, 111, 116, 120, 124, 128, 130, 132, 132, 130, 129, 128, 126, 123, 119, 115, 110, 105, 99, 93, 87, 80, 74, 67, 60, 53, 46, 39 };
const uint8_t  angles[NUM_LEDS]              { 255, 2, 4, 6, 8, 10, 12, 14, 16, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 43, 41, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 9, 7, 5, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 36, 38, 40, 42, 44, 46, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 24, 22, 20, 18, 16, 14, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 47, 49, 51, 53, 55, 57, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 39, 37, 35, 33, 31, 29, 27, 25, 28, 30, 32, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 62, 64, 66, 69, 67, 65, 63, 61, 59, 57, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 37, 39, 41, 43, 45, 47, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 80, 78, 76, 74, 72, 70, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 48, 50, 52, 54, 56, 58, 60, 62, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 51, 53, 55, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 85, 87, 89, 94, 92, 90, 88, 86, 84, 82, 80, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 62, 64, 66, 68, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 103, 101, 99, 97, 95, 93, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 71, 73, 75, 77, 79, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 110, 108, 105, 103, 101, 99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 78, 76, 74, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 103, 105, 107, 109, 111, 113, 115, 117, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98, 96, 93, 91, 89, 87, 85, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 116, 118, 120, 122, 124, 126, 129, 127, 125, 123, 121, 119, 117, 115, 113, 111, 108, 106, 104, 102, 100, 98, 96, 94, 97, 99, 101, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 131, 133, 135, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 141, 139, 137, 135, 133, 131, 129, 127, 125, 123, 121, 119, 116, 114, 112, 110, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 139, 141, 143, 145, 147, 149, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 129, 127, 125, 123, 121, 119, 117, 122, 124, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 154, 156, 158, 163, 161, 159, 157, 155, 153, 151, 149, 147, 144, 142, 140, 138, 136, 134, 132, 130, 128, 126, 131, 133, 135, 137, 139, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 172, 170, 168, 166, 164, 162, 159, 157, 155, 153, 151, 149, 147, 145, 143, 141, 139, 137, 135, 140, 142, 144, 146, 148, 150, 152, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 181, 179, 177, 174, 172, 170, 168, 166, 164, 162, 160, 158, 156, 154, 152, 150, 147, 145, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 170, 172, 174, 176, 178, 180, 182, 184, 186, 154, 156, 158, 160, 162, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 192, 195, 193, 191, 189, 187, 185, 182, 180, 178, 176, 174, 172, 170, 168, 166, 164, 162, 160, 163, 165, 167, 169, 171, 173, 175, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 204, 202, 200, 197, 195, 193, 191, 189, 187, 185, 183, 181, 179, 177, 175, 173, 170, 168, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 193, 195, 197, 199, 201, 203, 205, 207, 209, 215, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 183, 181, 179, 177, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 208, 210, 212, 214, 216, 218, 223, 221, 219, 217, 215, 213, 211, 209, 207, 205, 203, 201, 198, 196, 194, 192, 190, 188, 186, 191, 193, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 223, 225, 227, 232, 230, 228, 226, 224, 222, 220, 218, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 200, 202, 204, 206, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 238, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 231, 233, 235, 237, 239, 241, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 221, 219, 217, 215, 213, 211, 209, 214, 216, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 246, 248, 250, 252, 0, 253, 251, 249, 247, 245, 243, 241, 239, 236, 234, 232, 230, 228, 226, 224, 222, 220, 223, 225, 227, 229, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 1, 3, 5, 9, 7, 5, 3, 0, 254, 251, 249, 247, 245, 243, 241, 239, 237, 235, 233, 231, 229, 232, 234, 236, 238, 240, 242, 244, 247, 249, 251, 253, 255, 2, 4, 6, 8, 10, 12, 14, 20, 18, 16, 13, 11, 9, 7, 5, 3, 1, 254, 252, 250, 248, 246, 244, 242, 240, 237, 243, 245, 247, 249, 251, 253, 0, 2, 4, 6, 8, 11, 13, 15, 17, 19, 21, 23, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 1, 255, 252, 250, 248, 246, 252, 254, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 26, 28, 30, 32 };
const uint8_t  radii[NUM_LEDS]               { 0, 55, 80, 99, 115, 130, 142, 154, 165, 176, 185, 195, 204, 212, 220, 228, 236, 244, 251, 253, 246, 239, 231, 224, 215, 207, 198, 189, 179, 169, 159, 147, 135, 121, 106, 88, 66, 32, 47, 75, 95, 112, 126, 139, 152, 163, 173, 183, 193, 202, 210, 219, 227, 234, 242, 249, 252, 245, 237, 230, 222, 213, 205, 196, 187, 177, 167, 156, 144, 131, 117, 102, 83, 59, 18, 39, 69, 91, 108, 123, 136, 149, 160, 171, 181, 190, 200, 208, 217, 225, 233, 240, 247, 254, 250, 243, 235, 228, 220, 211, 203, 194, 185, 175, 164, 153, 141, 128, 114, 97, 78, 52, 27, 63, 86, 104, 120, 133, 146, 158, 168, 179, 188, 197, 206, 215, 223, 231, 238, 246, 253, 248, 241, 234, 226, 218, 210, 201, 192, 182, 172, 162, 150, 138, 125, 110, 93, 73, 44, 9, 57, 81, 100, 116, 130, 143, 155, 166, 176, 186, 195, 204, 213, 221, 229, 237, 244, 251, 254, 247, 239, 232, 224, 216, 207, 199, 190, 180, 170, 159, 148, 135, 122, 106, 89, 67, 35, 49, 76, 96, 112, 127, 140, 152, 163, 174, 184, 193, 202, 211, 219, 227, 235, 242, 249, 22, 61, 84, 103, 118, 132, 145, 157, 167, 178, 187, 197, 205, 214, 222, 230, 238, 245, 252, 255, 248, 240, 233, 225, 217, 209, 200, 191, 181, 171, 161, 149, 137, 124, 109, 92, 70, 41, 54, 79, 98, 115, 129, 142, 154, 165, 175, 185, 194, 203, 212, 220, 228, 236, 243, 251, 253, 246, 239, 231, 223, 215, 207, 198, 189, 179, 169, 158, 147, 134, 120, 105, 87, 65, 30, 46, 74, 94, 111, 126, 139, 151, 162, 173, 183, 192, 201, 210, 218, 226, 234, 242, 249, 252, 244, 237, 229, 221, 213, 205, 196, 187, 177, 166, 156, 144, 131, 117, 101, 82, 58, 15, 37, 68, 90, 107, 122, 136, 148, 160, 170, 181, 190, 199, 208, 216, 224, 232, 240, 247, 254, 250, 243, 235, 227, 219, 211, 203, 194, 184, 174, 164, 153, 141, 128, 113, 97, 77, 51, 25, 62, 85, 103, 119, 133, 146, 157, 168, 178, 188, 197, 206, 214, 223, 230, 238, 245, 253, 248, 241, 233, 226, 218, 209, 201, 191, 182, 172, 161, 150, 138, 125, 110, 93, 72, 43, 4, 56, 80, 99, 116, 130, 143, 154, 166, 176, 186, 195, 204, 212, 221, 229, 236, 244, 251, 33, 66, 88, 106, 121, 135, 147, 159, 170, 180, 189, 198, 207, 216, 224, 232, 239, 246, 254, 249, 242, 234, 227, 219, 210, 202, 193, 183, 173, 163, 152, 140, 127, 112, 95, 75, 48, 19, 60, 83, 102, 118, 132, 144, 156, 167, 177, 187, 196, 205, 214, 222, 230, 237, 245, 252, 255, 248, 240, 233, 225, 217, 208, 200, 191, 181, 171, 160, 149, 137, 123, 108, 91, 70, 39, 53, 78, 98, 114, 129, 142, 153, 165, 175, 185, 194, 203, 212, 220, 228, 236, 243, 250, 253, 246, 238, 231, 223, 215, 206, 198, 188, 179, 169, 158, 146, 134, 120, 104, 86, 64, 28, 45, 73, 94, 111, 125, 139, 151, 162, 173, 183, 192, 201, 210, 218, 226, 234, 241, 249, 251, 244, 237, 229, 221, 213, 204, 195, 186, 176, 166, 155, 143, 131, 116, 100, 81, 57, 12, 35, 67, 89, 107, 122, 136, 148, 159, 170, 180, 190, 199, 208, 216, 224, 232, 240, 247, 254, 250, 242, 235, 227, 219, 211, 202, 193, 184, 174, 164, 152, 140, 127, 113, 96, 76, 50, 23, 61, 84, 103, 119, 132, 145, 157, 168, 178, 188, 197, 206, 214, 222, 230, 238, 245, 252, 41, 71, 92, 109, 124, 137, 150, 161, 172, 182, 191, 200, 209, 217, 225, 233, 241, 248, 255, 251, 243, 236, 228, 220, 212, 204, 195, 185, 175, 165, 154, 142, 129, 115, 99, 80, 54, 31, 65, 87, 105, 121, 134, 147, 158, 169, 179, 189, 198, 207, 215, 223, 231, 239, 246, 253, 249, 242, 234, 226, 218, 210, 201, 192, 183, 173, 163, 151, 139, 126, 111, 95, 74, 47, 17, 59, 83, 101, 117, 131, 144, 156, 167, 177, 187, 196, 205, 213, 222, 229, 237, 244, 252, 254, 247, 240, 232, 225, 216, 208, 199, 190, 181, 171, 160, 149, 136, 123, 108, 90, 69, 38, 52, 78, 97, 114, 128, 141, 153, 164, 175, 184, 194, 203, 211, 220, 228, 235, 243, 250, 253, 246, 238, 231, 223, 215, 206, 197, 188, 178, 168, 157, 146, 133, 119, 104, 86, 63, 26, 43, 72, 93, 110, 125, 138, 150, 162, 172, 182, 192, 201, 209, 218, 226, 233, 241, 248, 251, 244, 236, 229, 221, 213, 204, 195, 186, 176, 166, 155, 143, 130, 116, 100, 81, 56, 7, 34, 66, 88, 106, 121, 135, 147, 159, 170, 180, 189, 199, 207, 216, 224, 232, 239, 247, 254, 49, 76, 96, 112, 127, 140, 152, 163, 174, 184, 193, 202, 211, 219, 227, 235, 242, 249, 252, 245, 237, 230, 222, 214, 205, 196, 187, 177, 167, 156, 145, 132, 118, 102, 84, 60, 21, 40, 70, 91, 108, 123, 137, 149, 161, 171, 181, 191, 200, 209, 217, 225, 233, 240, 248, 255, 250, 243, 236, 228, 220, 212, 203, 194, 185, 175, 165, 154, 142, 129, 114, 98, 79, 53, 29, 64, 87, 105, 120, 134, 146, 158, 169, 179, 189, 198, 207, 215, 223, 231, 239, 246, 253, 249, 241, 234, 226, 218, 210, 201, 192, 183, 173, 162, 151, 139, 126, 111, 94, 73, 45, 13, 58, 82, 101, 117, 131, 144, 155, 166, 177, 186, 196, 205, 213, 221, 229, 237, 244, 251, 254, 247, 240, 232, 224, 216, 208, 199, 190, 180, 170, 160, 148, 136, 122, 107, 89, 68, 36, 50, 77, 97, 113, 128, 141, 153, 164, 174, 184, 193, 202, 211, 219, 227, 235, 242, 250, 252, 245, 238, 230, 222, 214, 206, 197, 188, 178, 168, 157, 145, 133, 119, 103, 85, 62, 24, 42, 71, 92, 109, 124, 138, 150, 161, 172, 182, 191, 200, 209, 217, 225, 233, 241, 248 };

void drawSpiralLine(uint8_t angle, int step, CRGB color)
{
  int startIndex = 0;
  int smallestAngleDifference = 255;

  // find the outermost led closest to the desired angle
  for (int i = 0; i < NUM_LEDS; i++) {
    int j = physicalToFibonacci[i];
    if (j < step) continue;
    if (!(j + step >= NUM_LEDS)) continue; // not outermost
    uint8_t a = angles[i];
    if (a == angle) startIndex = i;
    else if (angle - a > 0 && angle - a < smallestAngleDifference) {
      smallestAngleDifference = angle - a;
      startIndex = i;
    }
  }

  // draw the starting LED
  leds[startIndex] += color;

  // draw to center from outer start
  int f = physicalToFibonacci[startIndex];
  while (f - step >= 0 && f - step < NUM_LEDS) {
    leds[fibonacciToPhysical[f]] += color;
    f = f - step;
  }
}


// given an angle and radius (and delta for both), set pixels that fall inside that range
void setPixelAR(uint8_t angle, uint8_t dAngle, uint8_t radius, uint8_t dRadius, CRGB color)
{
  uint8_t endRadius   = qadd8(radius, dRadius);
  uint8_t startRadius = qsub8(radius, dRadius);

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint8_t ro = radii[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        leds[i] = color;
      }
    }
  }
}

// given an angle and radius (and delta for both), add color to pixels that fall inside that range
void andPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color)
{
  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint8_t ro = radii[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        leds[i] += color;
      }
    }
  }
}

// given an angle and radius (and delta for both), set pixels that fall inside that range,
// fading the color from full-color at center, to off (black) at the outer edges.
void antialiasPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color, CRGB leds[], int _NUM_LEDS)
{
  for (uint16_t i = 0; i < _NUM_LEDS; i++) {
    uint8_t ro = radii[i];
    // only mess with the pixel when it's radius is within the target radius
    if (ro <= endRadius && ro >= startRadius) {
      // Get pixel's angle (unit256)
      uint8_t ao = angles[i];
      // set adiff to abs(ao - angle) ... relies on unsigned underflow resulting in larger value
      uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
      // only mess with the pixel when it's angle is within range of target
      if (adiff <= dAngle) {
        // map the intensity of the color so it fades to black at edge of allowed angle
        uint8_t fade = map(adiff, 0, dAngle, 0, 255);
        CRGB faded = color;
        // fade the target color based on how far the angle was from the target
        faded.fadeToBlackBy(fade);
        // add the faded color (as an overlay) to existing colors
        leds[i] += faded;
      }
    }
  }
}

void anglePalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void radiusPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {

    unsigned tmp = ((unsigned)(radii[i]));
#if ((NUM_LEDS & (NUM_LEDS-1)) == 0) // Power-of-two, so no need to check
    uint8_t r = tmp;
#else
    uint8_t r = tmp > 255 ? 255 : tmp;
#endif
    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (r * hues));
  }
}

void xPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void yPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (y * hues));
  }
}

void xyPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - ((x + y) * hues));
  }
}

void angleGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void radiusGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    unsigned tmp = (unsigned)radii[i];
#if ((NUM_LEDS & (NUM_LEDS-1)) == 0) // Power-of-two, so no need to check
    uint8_t r = tmp;
#else
    uint8_t r = tmp > 255 ? 255 : tmp;
#endif

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (r * hues));
  }
}

void xGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void yGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (y * hues));
  }
}

void xyGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - ((x + y) * hues));
  }
}

void radarSweepPalette() {
  fadeToBlackBy(leds, NUM_LEDS, 64);

  uint8_t a = beat8(speed);
  uint8_t b = beat88(1);

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint8_t angle = angles[i];

    if(abs(angle - a) < 3) {
      leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed));
    }
    if(abs(angle - b) < 3) {
      leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) + 85);
    }
  }
}

// void drawAnalogClock() {
//   const uint8_t hourRadius = 128;   // 128 of 256 radius "units" ==> 1/2
//   const uint8_t minuteRadius = 192; // 192 of 256 radius "units" ==> 3/4
//   const uint8_t secondRadius = 255; // 255 of 256 radius "units" ==> 1/1

//   const uint8_t hourHandWidth   = 8; // angle @ unit256 ~= 11.25000 degrees
//   const uint8_t minuteHandWidth = 7; // angle @ unit256 ~=  9.84375 degrees
//   const uint8_t secondHandWidth = 6; // angle @ unit256 ~=  8.43750 degrees

//   const float degreesPerSecond = 256.0 / 60.0;
//   const float degreesPerMinute = 256.0 / 60.0;
//   const float degreesPerHour   = 256.0 / 12.0;

//   static uint8_t hourAngle   = 0;
//   static uint8_t minuteAngle = 0;
//   static uint8_t secondAngle = 0;

//   EVERY_N_MILLIS(100) {
//     float second = timeClient.getSeconds();
//     float minute = timeClient.getMinutes() + (second / 60.0);
//     float hour   = timeClient.getHours()   + (minute / 60.0);

//     hourAngle   = 64u - hour   * degreesPerHour;
//     minuteAngle = 64u - minute * degreesPerMinute;
//     secondAngle = 64u - second * degreesPerSecond;
//   }

//   // although can update angles once every 100ms, have to perform fade & overlay with each cycle
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   antialiasPixelAR(secondAngle, secondHandWidth, 0, secondRadius, CRGB::Blue );
//   antialiasPixelAR(minuteAngle, minuteHandWidth, 0, minuteRadius, CRGB::Green);
//   antialiasPixelAR(hourAngle, hourHandWidth, 0, hourRadius, CRGB::Red);
//   // leds[0] = CRGB::Red; // need to rethink, physical LED 0 is not always in the center...
// }

// void drawSpiralAnalogClock(uint8_t step_h, uint8_t step_m, uint8_t step_s) {
//   static uint8_t hourAngle   = 0;
//   static uint8_t minuteAngle = 0;
//   static uint8_t secondAngle = 0;

//   const float degreesPerSecond = 256.0 / 60.0;
//   const float degreesPerMinute = 256.0 / 60.0;
//   const float degreesPerHour   = 256.0 / 12.0;

//   EVERY_N_MILLIS(100) {
//     float second = timeClient.getSeconds();
//     float minute = timeClient.getMinutes() + (second / 60.0);
//     float hour   = timeClient.getHours()   + (minute / 60.0);

//     hourAngle   = 64u - hour   * degreesPerHour;
//     minuteAngle = 64u - minute * degreesPerMinute;
//     secondAngle = 64u - second * degreesPerSecond;
//   }

//   drawSpiralLine(secondAngle, step_s, CRGB::Blue );
//   drawSpiralLine(minuteAngle, step_m, CRGB::Green);
//   drawSpiralLine(hourAngle,   step_h, CRGB::Red  );
// }

// void drawSpiralAnalogClock(uint8_t step) {
//   drawSpiralAnalogClock(step, step, step);
// }

// void drawSpiralAnalogClock13() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(13);
// }

// void drawSpiralAnalogClock21() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(21);
// }

// void drawSpiralAnalogClock34() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(34);
// }

// void drawSpiralAnalogClock55() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(55);
// }

// void drawSpiralAnalogClock89() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(89);
// }

// void drawSpiralAnalogClock21and34() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(21);
//   drawSpiralAnalogClock(34);
// }

// void drawSpiralAnalogClock13_21_and_34() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(34, 21, 13);
// }

// void drawSpiralAnalogClock34_21_and_13() {
//   fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
//   drawSpiralAnalogClock(13, 21, 34);
// }